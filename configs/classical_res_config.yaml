# Configuration for the Classical Residual LSTM (Benchmark for QResLSTM)
project: "demand_forecasting"
experiment_name: "ClassicalResLSTM_Benchmark"

# --- Data Configuration (Identical to QResLSTM) ---
target_column: "Demand(MW)"
forecasting_type: "univariate"
features: []
sequence_length: 24
forecast_horizon: 1
test_size: 0.2
val_size: 0.2
random_state: 42

# Feature Engineering (Identical to QResLSTM)
feature_engineering:
  use_time_features: false
  use_cyclical_encoding: false
  use_lag_features: false
  use_rolling_window_features: false

# --- Model Configuration ---
model_type: "Classical_Res_LSTM" # <-- Use the new model type

# Model Hyperparameters (Identical to QResLSTM for a fair comparison)
hidden_size: 128
q_delta: 0.05 # Keep this parameter to scale the classical residual identically
num_layers: 2

# Common Parameters
input_size: 1 # Auto-set by preprocessing
dropout: 0.2

# --- Training Configuration (Identical to QResLSTM) ---
batch_size: 32
learning_rate: 0.001
num_epochs: 50
patience: 10
checkpoint_freq: 5

# Scheduler Configuration
scheduler_config:
  use_scheduler: True
  mode: 'min'
  factor: 0.5
  patience: 5

# --- W&B Configuration ---
use_wandb: True
# Log to the same project as your QResLSTM for direct comparison!
wandb_project: "demand_forecasting_SOTA_Quantum"
wandb_entity: null
